rootProject.name = 'open_audio_books_api'
include 'core'
include 'api'
include 'infra'
include 'webapp'

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            def springBoot = version('spring-boot', '3.3.1')
            plugin('spring-boot', 'org.springframework.boot').versionRef(springBoot)
            plugin('spring-dependency-management', 'io.spring.dependency-management').version('1.1.5')
            library('spring-boot-starter', 'org.springframework.boot', 'spring-boot-starter').versionRef(springBoot)
            library('spring-boot-starter-data-jpa', 'org.springframework.boot', 'spring-boot-starter-data-jpa').versionRef(springBoot)
            library('spring-boot-starter-web', 'org.springframework.boot', 'spring-boot-starter-web').versionRef(springBoot)
            library('spring-boot-starter-validation', 'org.springframework.boot', 'spring-boot-starter-validation').versionRef(springBoot)
            library('spring-content-fs-boot-starter', 'com.github.paulcwarren', 'spring-content-fs-boot-starter').version('3.0.13')
            library('spring-boot-starter-test', 'org.springframework.boot', 'spring-boot-starter-test').versionRef(springBoot)
            library('spring-boot-devtools', 'org.springframework.boot', 'spring-boot-devtools').versionRef(springBoot)
            library('model-mapper', 'org.modelmapper:modelmapper:3.2.0')
            library('lombok', 'org.projectlombok:lombok:1.18.34')
            library('slf4j-api', 'org.slf4j:slf4j-api:2.0.13')
            def flyway = version('flyway', '10.20.1')
            library('flyway', 'org.flywaydb', 'flyway-core').versionRef(flyway)
            plugin('flyway', 'org.flywaydb.flyway').versionRef(flyway)
        }
        testLibs {
            def junit5 = version('junit5', '5.10.0')
            library('junit-jupiter', 'org.junit.jupiter', 'junit-jupiter').versionRef(junit5)
            library('junit-bom', 'org.junit', 'junit-bom').versionRef(junit5)
            library('junit-platform-launcher', 'org.junit.platform', 'junit-platform-launcher').version('1.10.3')
            def mockito = version('mockito', '5.12.0')
            library('mockito-core', 'org.mockito', 'mockito-core').versionRef(mockito)
            library('mockito-junit', 'org.mockito', 'mockito-junit-jupiter').versionRef(mockito)
            library('hamcrest', 'org.hamcrest', 'hamcrest').version('2.2')
        }
        webapp {
            // I have no idea how the versioning of JoinFaces works (ie difference between jsf-spring-boot-starter and faces-spring-boot-starter)
            // I can only guess that it depends on whether you can use the gradle plugin (cannot use it due to only available for vers 5.2-m3)
            // This here simply follows the guide for 5.3.4: https://docs.joinfaces.org/5.3.4/reference/
            def joinFaces = version('joinFaces', '5.3.4') // 5.3.4 Compatible with Spring 3.3: https://github.com/joinfaces/joinfaces?tab=readme-ov-file#system-requirements
            library('joinFaces-platform', 'org.joinfaces', 'joinfaces-platform').versionRef(joinFaces)
            library('joinFaces-faces-starter', 'org.joinfaces', 'faces-spring-boot-starter').versionRef(joinFaces)
            library('joinFaces-myFaces-starter', 'org.joinfaces', 'myfaces-spring-boot-starter').versionRef(joinFaces)
            library('joinFaces-primefaces-starter', 'org.joinfaces', 'primefaces-spring-boot-starter').versionRef(joinFaces)
            library('joinFaces-omnifaces-starter', 'org.joinfaces', 'omnifaces-spring-boot-starter').versionRef(joinFaces)
        }
    }
}

